package linh.vn.cinegoticket.redis;

import lombok.extern.slf4j.Slf4j;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cache.interceptor.CacheErrorHandler;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.data.redis.cache.RedisCacheConfiguration;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.listener.ChannelTopic;
import org.springframework.data.redis.listener.RedisMessageListenerContainer;
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.RedisSerializationContext;
import org.springframework.data.redis.serializer.RedisSerializer;
import org.springframework.data.redis.serializer.StringRedisSerializer;

import java.time.Duration;

@Configuration
@EnableCaching
@Slf4j
public class RedisConfig {
    @Bean
    @Primary
    public CacheManager listCacheManager(final RedisConnectionFactory redisConnectionFactory) {
        return build(redisConnectionFactory, new Jackson2JsonRedisSerializer<>(Object.class), Duration.ofMinutes(10)); // TTL 10 ph√∫t
    }

    @Bean
    public CacheManager objectCacheManager(final RedisConnectionFactory redisConnectionFactory) {
        return build(redisConnectionFactory, RedisSerializer.json(), Duration.ofHours(1)); // TTL 1 gi·ªù
    }

    private CacheManager build(final RedisConnectionFactory redisConnectionFactory,
                               final RedisSerializer<?> redisSerializer,
                               final Duration ttl) {
        final var serializer = RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer);
        return RedisCacheManager.RedisCacheManagerBuilder.fromConnectionFactory(redisConnectionFactory)
                .cacheDefaults(RedisCacheConfiguration.defaultCacheConfig()
                        .disableCachingNullValues()
                        .entryTtl(ttl) // Set TTL cho cache
                        .serializeValuesWith(serializer))
                .build();
    }

    //N·∫øu Redis ng·∫Øt, c√°c method @Cacheable, @CachePut, @CacheEvict s·∫Ω kh√¥ng crash, m√† b·ªè qua cache,
    //t·ª± ƒë·ªông fallback v·ªÅ truy v·∫•n th·∫≠t (DB).
    //Ch·ªâ c·∫ßn config CacheErrorHandler ghi log, kh√¥ng c·∫ßn vi·∫øt truy v·∫•n v·ªÅ db th·ªß c√¥ng, Spring ƒë√£ lo
    @Bean
    public CacheErrorHandler cacheErrorHandler() {
        return new CacheErrorHandler() {
            @Override
            public void handleCacheGetError(RuntimeException e, Cache cache, Object key) {
                log.warn("Cache GET error for key {}: {}", key, e.getMessage());
            }
            @Override
            public void handleCachePutError(RuntimeException e, Cache cache, Object key, Object value) {
                log.warn("Cache PUT error for key {}: {}", key, e.getMessage());
            }
            @Override
            public void handleCacheEvictError(RuntimeException e, Cache cache, Object key) {
                log.warn("Cache EVICT error for key {}: {}", key, e.getMessage());
            }
            @Override
            public void handleCacheClearError(RuntimeException e, Cache cache) {
                log.warn("Cache CLEAR error: {}", e.getMessage());
            }
        };
    }

    //PUB- SUB
    //1. T·∫°o RedisTemplate ƒë·ªÉ g·ª≠i/nh·∫≠n d·ªØ li·ªáu JSON.
    @Bean
    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {
        RedisTemplate<String, Object> template = new RedisTemplate<>();
        template.setConnectionFactory(factory);
        template.setKeySerializer(new StringRedisSerializer());
        template.setValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));
        return template;
    }

    //2. T·∫°o channel Pub/Sub: T·∫°o = bean ri√™ng, thay v√¨ fix c·ª©ng trong redisContainer, d·ªÖ b·∫£o tr√¨ h∆°n
    @Bean
    public ChannelTopic topic() {
        return new ChannelTopic("payment-channel");
    }

    //3. Container trung t√¢m: knoi Redis + ƒëky subcriber v√† channel
    @Bean
    public RedisMessageListenerContainer redisContainer(RedisConnectionFactory connectionFactory,
                                                        RedisSubscriber subscriber, // ƒêƒÉng k√Ω tr·ª±c ti·∫øp
//                                                        MessageListenerAdapter listenerAdapter,//c√°ch 2 dky subcriber
                                                        ChannelTopic topic) {
        RedisMessageListenerContainer container = new RedisMessageListenerContainer();
        container.setConnectionFactory(connectionFactory);
//        container.addMessageListener(listenerAdapter, topic);//c√°ch 2 dky subcriber
        container.addMessageListener(subscriber, topic);
        log.info("üì° RedisMessageListenerContainer is initialized!");
        return container;
    }
}
